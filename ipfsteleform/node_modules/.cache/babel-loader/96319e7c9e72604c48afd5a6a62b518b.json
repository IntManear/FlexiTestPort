{"ast":null,"code":"import _regeneratorRuntime from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/devansh/CryptoCare/teleformform/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devansh/CryptoCare/teleformform/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nvar all = require('it-all');\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, contract, memeHash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = Meme.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                contract = web3.eth.Contract(Meme.abi, networkData.address);\n                this.setState({\n                  contract: contract\n                });\n                _context3.next = 14;\n                return contract.methods.get().call();\n\n              case 14:\n                memeHash = _context3.sent;\n                this.setState({\n                  memeHash: memeHash\n                });\n                _context3.next = 19;\n                break;\n\n              case 18:\n                window.alert('Smart contract not deployed to detected network.');\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.onSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(event) {\n        var data, ipfsHash, arr;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault();\n                console.log(\"Submitting file to ipfs...\");\n                data = JSON.stringify({\n                  name: \"Devansh\",\n                  link0: \"\",\n                  link1: \"\",\n                  link2: \"\"\n                });\n                ipfsHash = ipfs.add(data);\n                _context4.next = 6;\n                return all(ipfsHash);\n\n              case 6:\n                arr = _context4.sent;\n                console.log(arr);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.state = {\n      memeHash: '',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-primary flex-md-nowrap p-4 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"CryptoCare\")), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Teleform Consultation Form\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        for: \"patid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Patient Id \\xA0\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"patid\",\n        onChange: this.captureFile,\n        placeholder: \"Patient ID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        for: \"docid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Doctor ID \\xA0\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"docid\",\n        onChange: this.captureFile,\n        placeholder: \"Doctor ID\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        for: \"teleurl\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"Google Meets url \\xA0\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"teleurl\",\n        onChange: this.captureFile,\n        placeholder: \"Google Meets url\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        for: \"testkitid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Test Kit ID \\xA0\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"testkitid\",\n        onChange: this.captureFile,\n        placeholder: \"Test Kit id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/devansh/CryptoCare/teleformform/src/components/App.js"],"names":["React","Component","Web3","Meme","ipfsClient","require","ipfs","host","port","protocol","all","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","contract","Contract","abi","address","methods","get","call","memeHash","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","console","log","state","onSubmit","data","JSON","stringify","name","link0","link1","link2","ipfsHash","add","arr"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\nconst all = require('it-all')\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    const networkId = await web3.eth.net.getId()\n    const networkData = Meme.networks[networkId]\n    if(networkData) {\n      const contract = web3.eth.Contract(Meme.abi, networkData.address)\n      this.setState({ contract })\n      const memeHash = await contract.methods.get().call()\n      this.setState({ memeHash })\n    } else {\n      window.alert('Smart contract not deployed to detected network.')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      memeHash: '',\n      contract: null,\n      web3: null,\n      buffer: null,\n      account: null\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  onSubmit = async(event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    const data = JSON.stringify({\n      name: \"Devansh\",\n    link0: \"\",\n    link1: \"\",\n    link2: \"\"\n    })\n    const ipfsHash = ipfs.add(data)\n    const arr = await all(ipfsHash)\n    console.log(arr)\n    \n      \n  }\n\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-primary flex-md-nowrap p-4 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.dappuniversity.com/bootcamp\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            CryptoCare \n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"http://www.dappuniversity.com/bootcamp\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  \n                </a>\n                <p>&nbsp;</p>\n                <p>&nbsp;</p>\n                <p>&nbsp;</p>\n                \n                <h2>Teleform Consultation Form</h2>\n                <p>&nbsp;</p>\n                \n                <form onSubmit={this.onSubmit} >\n                  <label for=\"patid\">Patient Id &nbsp;</label>\n                  <input type='text' id='patid' onChange={this.captureFile} placeholder=\"Patient ID\"/>\n                  <br />\n                  <br />\n                  <label for=\"docid\">Doctor ID &nbsp;</label>\n                  <input type='text' id='docid' onChange={this.captureFile} placeholder=\"Doctor ID\"/>\n                  <br />\n                  <br />\n                  <label for=\"teleurl\">Google Meets url &nbsp;</label>\n                  <input type='text' id='teleurl' onChange={this.captureFile} placeholder=\"Google Meets url\"/>\n                  <br />\n                  <br />\n                  <label for=\"testkitid\">Test Kit ID &nbsp;</label>\n                  <input type='text' id='testkitid' onChange={this.captureFile} placeholder=\"Test Kit id\"/>\n                  <br />\n                  <br />\n                  <input type='submit' />\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}